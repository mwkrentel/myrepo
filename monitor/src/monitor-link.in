#!/bin/sh
#
#  Copyright (c) 2019-2020, Rice University.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
#  * Neither the name of Rice University (RICE) nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  This software is provided by RICE and contributors "as is" and any
#  express or implied warranties, including, but not limited to, the
#  implied warranties of merchantability and fitness for a particular
#  purpose are disclaimed. In no event shall RICE or contributors be
#  liable for any direct, indirect, incidental, special, exemplary, or
#  consequential damages (including, but not limited to, procurement of
#  substitute goods or services; loss of use, data, or profits; or
#  business interruption) however caused and on any theory of liability,
#  whether in contract, strict liability, or tort (including negligence
#  or otherwise) arising in any way out of the use of this software, even
#  if advised of the possibility of such damage.
#
# ----------------------------------------------------------------------
#
#  Link an application with libmonitor-preinit.o and callback
#  functions for 'always on' profiling.
#
#  Usage: monitor-link [options] compiler arg ...
#
#    -S, --static
#    -h, --help
#    -v, --verbose
#    -i, --insert  <file>
#
#  where <file> is an object (.o) or archive (.a) file containing
#  definitions of the callback functions (may be used multiple times).
#

prefix="@prefix@"
exec_prefix="@exec_prefix@"
libdir="@libdir@"
monitor_link="${libdir}/libmonitor-link.o"
monitor_static="${libdir}/libmonitor-static.o"

gotcha_libdir="@GOTCHA_LIBDIR@"

#----------------------------------------------------------------------

die()
{
    echo "$0: error: $*" 1>&2
    exit 1
}

usage()
{
    cat <<EOF
Usage: $0 [options] compiler arg ...

   -S, --static
   -h, --help
   -v, --verbose
   -i, --insert  <file>

where <file> is an object (.o) or archive (.a) file containing
definitions of the callback functions (may be used multiple times).

EOF
    exit 0
}

#----------------------------------------------------------------------

insert_files=
static=no
verbose=no

#
#  Our options come first.
#
while test "x$1" != x
do
    case "$1" in
	-h | -help | --help )
	    usage
	    ;;

	-i | -insert | --insert )
	    test "x$2" != x || die "missing argument: $*"
	    insert_files="${insert_files} $2"
	    shift ; shift
	    ;;

	-S | --static )
	    static=yes
	    shift
	    ;;

	-v | -verbose | --verbose )
	    verbose=yes
	    shift
	    ;;

	-- )
	    shift
	    break
	    ;;

	-* )
	    die "unknown option: $1"
	    ;;

	* )
	    break
	    ;;
    esac
done

#----------------------------------------------------------------------
#
#  Construct the new link line and run it.  Must have at least a
#  compiler.
#
test "x$1" != x || usage

if test "$static" = yes
then
    set -- "$@"  \
	-Wl,--wrap=main  \
	-Wl,--wrap=pthread_create  \
	"$monitor_static"  \
	$insert_files
else
    set -- "$@"  \
	-Wl,--wrap=main  \
	"$monitor_link"  \
	$insert_files  \
	"-L$gotcha_libdir" -lgotcha  \
	"-Wl,-rpath=$gotcha_libdir"
fi

if test "$verbose" = yes ; then
    echo "$@"
fi

"$@"
