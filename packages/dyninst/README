--------------------
Dyninst Build Notes
--------------------

Home: http://www.dyninst.org/
      http://www.paradyn.org/

Git:  https://github.com/dyninst/

git clone https://github.com/dyninst/dyninst

License: LGPL

Prereqs: boost, elfutils, (libelf, libdw), libiberty

Builds with cmake, version 2.8.12 or 3.x or later (maybe 2.8.10).
Supports vpath and parallel make.

export PLATFORM=platform
cmake ../dyninst  \
    -DCMAKE_INSTALL_PREFIX=/path/to/prefix  \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_C_COMPILER=CC  \
    -DCMAKE_CXX_COMPILER=CXX  \

    -DUSE_COTIRE=False  \
    -DBUILD_DOCS=Off  \
    -DBUILD_RTLIB=Off  \
    -DBUILD_TARBALLS=Off  \

    -DPATH_BOOST=/path/to/boost/prefix  \
    -DLIBELF_INCLUDE_DIR=/path/to/libelf/include  \
    -DLIBELF_LIBRARIES=/path/to/libelf.so  \
    -DLIBDWARF_INCLUDE_DIR=/path/to/libdwarf/include  \
    -DLIBDWARF_LIBRARIES=/path/to/libdwarf.so  \
    -DIBERTY_LIBRARIES=/path/to/libiberty.a  \

    -DTBB_ROOT_DIR=/path/to/tbb/prefix  \
    -DTBB_INCLUDE_DIR=/path/to/tbb/include  \
    -DTBB_LIBRARY=/path/to/tbb/lib

for subdir in common elf dwarf symtabAPI instructionAPI parseAPI
do
    make -j 4
    make install
done

Notes

1. Builds with cmake, but we avoid CMakePackage because that forces
always rebuilding cmake (won't accept cmake on path) and cmake's
prereq, openssl.

2. LIBELF_LIBRARIES, LIBDWARF_LIBRARIES and IBERTY_LIBRARIES are the
actual libraries (.so and .a files), not the directory containing
them.  But DTBB_LIBRARY is the lib directory.

3. We don't build full dyninst, just symtabAPI, parseAPI and their
prereqs.

4. Probably requires GNU gcc/g++ 4.8 or later and std C++11.

------------------------------------------------------------

Old Notes

(3) Specify CC and CXX with absolute path.  If these are only 'gcc',
then cmake takes /usr/bin/gcc over gcc earlier in PATH. (wtf!?)

(5) Dyninst doesn't allow options on CC or CXX compilers.  So, instead
of 'g++ -m32', we need to move -m32 to FLAGS. (yuck)

(6) Dyninst overrides CMAKE_C/CXX_FLAGS, so we write these into
optimization.cmake instead.

(9) Boost misreads the C++11 features in the g++ k1om compiler
(version 4.7.0 but missing some 4.7 features).  As a workaround, add
-DBOOST_NO_CXX11_ALLOCATOR and -DBOOST_NO_CXX11_VARIADIC_TEMPLATES for
back-end Xeon Phi and k1om compiler.

